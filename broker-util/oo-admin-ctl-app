#!/usr/bin/env oo-ruby

require 'rubygems'
require 'getoptlong'

CTL_APP_COMMANDS = "(remove-marketplace-carts)"

def usage
  puts <<USAGE
== Synopsis

oo-admin-ctl-app: Control user applications

== Usage

oo-admin-ctl-app OPTIONS

Options:
-c|--command <command>
--dry_run_remove
    Print what will be removed but don't remove
-h|--help
    Show Usage info
USAGE
end

opts = GetoptLong.new(
    ["--command",          "-c", GetoptLong::REQUIRED_ARGUMENT],
    ["--dry_run_remove",         GetoptLong::NO_ARGUMENT],
    ["--help",             "-h", GetoptLong::NO_ARGUMENT]
)

args = {}
begin
  opts.each{ |k,v| args[k]=v }
rescue GetoptLong::Error => e
  usage
  exit 255
end

#app_name = args["--app"]
command  = args['--command']
dry_run_remove = args['--dry_run_remove']

if args["--help"]
  usage
  exit 0
end

require "#{ENV['OPENSHIFT_BROKER_DIR'] || '/var/www/openshift/broker'}/config/environment"
include AdminHelper

# Disable analytics for admin scripts
Rails.configuration.analytics[:enabled] = false

reply = ResultIO.new
begin
  Application.each do |app|
    begin
      if command == "remove-marketplace-carts"
        app.component_instances.each do |component_instance|
          cart = component_instance.cartridge_name
          #match = /cron/.match(cart)  
          match = /(84codes_ab-cloudamqp|84codes_ab-elephantsql|flashreport-flashreport|flow_search_corporation-flowthings|iron_io-ironmq|iron_io-ironworker|memcachier-memcachier|mongolab-mongolab|new_relic-newrelic|redis_labs-memcachedcloud|redis_labs-rediscloud|sebula_ltd-searchly|sendgrid-sendgrid|successbricks__inc__dba_cleardb-cleardb|teachmatic_ltd-statica|temporize-temporize)(-|_).*/.match(cart)
          if match != nil
            filename = "marketplace_carts_in_#{app.name}.txt"
            open(filename, 'a') do |f| f << "Marketplace cart: #{cart} \n"
            end
            if !dry_run_remove  
              app.remove_cartridges([cart])
            end
          end
        end
      end
    rescue OpenShift::UserException => e
      puts e.message
      exit 1
    end
  end
end
puts "DEBUG OUTPUT:\n#{reply.debugIO.string}\n" unless reply.debugIO.string.empty?
puts "ERROR OUTPUT:\n#{reply.errorIO.string}\n" unless reply.errorIO.string.empty?
puts reply.resultIO.string.empty? ? "Success" : reply.resultIO.string
